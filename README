kfc35m ss2249, hhc39

To run:
  Deploy the .war file into the tomcat7 webapps directory

Our code is separated into two components:
The java code:
	Terminator - a thread that removes expired session from the concurrent hashmap table of sessions. This runs every 2 minutes. The thread is synchronized and every servlet owns a Terminator.
	BasicSessionServlet - Is called in both GET and POST instances. GET is for first time access and refresh, which we determined were very similar. POST is for Log out and Replace. There's a concurrent hash map for the sessions. We chose this over a priority queue because we believed it better to be better for concurrency than a priority queue is for choosing which elements to remove. The sessionId is UUID (in the future with multiple servlets, the sessionID will be also include the servlet number, which is simply zero in this case). The cookies passed to the client is a regular java cookie with the value as the class name of CS5300PROJ1SESSION and the value as the sessionId.
	CS5300PROJ1SESSION - the session object. In addition to its inherent values, it also has a string sessionId, a string message, and a long end (expiration time). The version number is the parent's version. The size is restricted to 512 bytes, as to prepare for the next assignment. We contemplated whether to strip the html from the Replace message, but decided against it. 

The first.jsp:
	The html is rendered per response. There are various getServletContext requests to fill out the information to be updated, such as the message, the expiration time, and the address.

Concurrency:
	The session table is a concurrent hash map, and all instances to it are "synchronized"

Cheers, 
Kevin, Horace, and Sweet
